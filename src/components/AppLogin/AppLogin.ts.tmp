import { html, LitElement, property } from '@polymer/lit-element';
import { until } from 'lit-html/directives/until';
import { Mixin } from '@anoblet/mixin';
import { BaseMixin } from '@anoblet/base-mixin'

import { connect } from 'pwa-helpers/connect-mixin.js';
import { store } from '../../store.js';
import { setDebug, setTheme } from '../../actions/Settings.js';

import Template from './AppLoginTemplate';

import * as style from './AppLogin.scss'

import(/* webpackChunkName: "MyFirebaseLogin" */ '@anoblet/my-firebase/MyFirebaseLogin')
export class AppLogin extends connect(store)(Mixin(LitElement, [BaseMixin])) {
  @property({ type: Boolean }) isSignedIn = false;
  @property({ type: Boolean }) _loaded = false;

  template: any = '';
  uiConfig = {
    signInSuccessUrl: () => {
      this.isSignedIn = true;
      return "/";
    },
    tosUrl: '<your-tos-url>',
    privacyPolicyUrl: function () {
      window.location.assign('<your-privacy-policy-url>');
    }
  };
  // uiElement: any = '';

  constructor() {
    super();
    this.template = Template;
  }

  _isSignedIn() {
    return new Promise(async (resolve, reject) => {
      await Promise.all([
        import('firebase/app'),
        import('firebase/auth'),
      ]).then(([firebase]) => {
        firebase.auth().onAuthStateChanged((user: any) => {
          if(user) this.isSignedIn = true;
          user ? Promise.resolve(true) : resolve(false);
        });
      });
    });
    Promise.all([
      import('firebase/app'),
      import('firebase/auth'),
    ]).then(([firebase]) => {
      firebase.auth().onAuthStateChanged((user: any) => {
        user ? Promise.resolve(true) : Promise.resolve(false);
          // this.isSignedIn = true;
      });
    });
  }

  _resetSettings() {
    this._updateStore({
      debug: false,
      theme: 'light'
    })
  }

  _updateStore(data: any) {
    const state = store.getState();
    const mergedState = Object.assign(state, data)
    return new Promise(async (resolve, reject) => {
      await store.dispatch(setDebug(mergedState.debug));
      await store.dispatch(setTheme(mergedState.theme));
      resolve();
    });
  }

  async _loadUi() {
    return await Promise.all([
      import(/* webpackChunkName: "firebaseApp" */ 'firebase/app'),
      import(/* webpackChunkName: "firebaseui" */ 'firebaseui'),
    ]).then(([firebase, firebaseui]) => {
      console.log('Load UI');
      const uiConfig = {
        ...this.uiConfig,
        signInOptions: [
          firebase.auth.GoogleAuthProvider.PROVIDER_ID,
          firebase.auth.FacebookAuthProvider.PROVIDER_ID,
          firebase.auth.TwitterAuthProvider.PROVIDER_ID,
          firebase.auth.GithubAuthProvider.PROVIDER_ID,
          firebase.auth.EmailAuthProvider.PROVIDER_ID,
          firebase.auth.PhoneAuthProvider.PROVIDER_ID,
          firebaseui.auth.AnonymousAuthProvider.PROVIDER_ID
        ]
      };
      let ui = firebaseui.auth.AuthUI.getInstance();
      console.log(ui);
      if (!ui) {
        ui = new firebaseui.auth.AuthUI(firebase.auth());
      }
      const e = document.createElement('div');
      ui.start(this.shadowRoot.querySelector('#auth'), uiConfig);
    });
  }

  _logoutHandler() {
    this.isSignedIn = false;
    Promise.all([
      import(/* webpackChunkName: "firebaseApp" */ 'firebase/app'),
      import(/* webpackChunkName: "firebaseAuth" */ 'firebase/auth')
    ]).then(([firebase]) => {
      firebase.auth().signOut();
    });
    this._resetSettings();
  }

  _loaderHtml() {
    return html`<style>${style}</style><my-loader></my-loader>`;
  }

  async _loadLib() {
    const app = await import('firebase/app').then((module) => module.default);
    const ui = await import('firebaseui').then((module) => module.default);
    return [app, ui];
  }

  async _chain(items: any) {
    return await items.reduce(async (p: any, fn: any) => p.then(await fn), Promise.resolve())
  }

  _beforeRender(depends: any, callback: any, loader: any) {
    return html`${until(this._chain(depends).then(() => callback()), loader())}`;
  }

  render() {
    if(!this._loaded) {
      this._isSignedIn().then((result) => {
        if(!result) this._loadUi();
      });
    }
    return Template.bind(this)();

  }

  // render() {return this._beforeRender(
  //     [this._loadLib(), this._loadUi(), this._isSignedIn()], () => Template.bind(this), this._loaderHtml
  //   );
  // }
}

window.customElements.define('app-login', AppLogin);
